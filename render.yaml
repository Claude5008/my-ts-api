# render.yaml
# This file defines your application stack for Render deployment

# Services section defines all components of your application
services:
  # Node.js API Service
  - type: web # This service will be accessible via HTTP/HTTPS
    name: my-ts-api-app # Unique name for your service on Render (internal and external)
    env: docker # Specify that this is a Docker-based service
    dockerfilePath: Dockerfile # Path to your Dockerfile (relative to repo root)
    # The build context for the Dockerfile is implicitly the repo root
    # Build a custom image for the app service
    # command: npm start # No need for explicit command if CMD is in Dockerfile
    # ports: # Not needed for internal services unless you want to map a different internal port
    envVars:
      - key: NODE_ENV
        value: production
      # Add other sensitive environment variables here,
      # or manage them via the Render dashboard for better security.
      # - key: API_KEY
      #   sync: false # Set to false to prevent showing value in logs for secrets
      #   value: your_secret_api_key

    # Instance types (pricing tiers)
    # starter: small, free, etc. Refer to Render docs for latest pricing.
    # free tier services might sleep after inactivity
    plan: starter # Example: 'starter' or 'free' (if available for web services)
    # healthCheckPath: /api/health # Optional: Path for Render to check if app is healthy

    # Advanced: If you need persistent storage for file uploads etc.
    # disk:
    #   name: myapi-data
    #   mountPath: /app/data
    #   sizeGB: 1

  # NGINX Reverse Proxy Service
  - type: web # This service will be publicly accessible
    name: my-ts-api-nginx # Unique name for your NGINX service
    env: docker # Specify Docker
    # We use a pre-built NGINX image directly, no Dockerfile needed for NGINX
    # image: nginx:latest
    
    # NOW WE BUILD A CUSTOM NGINX IMAGE with our config
    dockerfilePath: ./nginx/Dockerfile.nginx
    # NGINX needs to listen on port 80 (HTTP)
    # Render maps its public port to this internal port
    # port: 80 # <--- CORRECTED: use 'port' not 'ports' for web service
    envVars:
      # No specific environment variables needed for NGINX usually
      - key: NGINX_ROOT
        value: /etc/nginx/conf.d # Example env var, not strictly necessary

    # Mount the custom NGINX config from your repository
    # Render doesn't use the 'volumes' syntax directly in Blueprint
    # Instead, copy files during the build process or use entrypoint scripts
    # For NGINX, it's common to define a custom build with a Dockerfile
    # or use an entrypoint script to copy the config.
    # Let's adjust this. Simplest way is to define a custom Dockerfile for NGINX.
    # dockerfilePath: ./nginx/Dockerfile.nginx # Path to a new Dockerfile specifically for NGINX

    plan: starter # Match the plan for consistency, or adjust based on needs
    # healthCheckPath: / # Simple check for NGINX